import java.util.Stack;

public class Solution {
    public int calculate(String s) {
        int n = s.length();
        int res = 0;
        int num = 0;
        int sign = 1; // 1 for '+', -1 for '-'
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            
            if (Character.isDigit(c)) {
                num = num * 10 + (c - '0');
            } else if (c == '+') {
                res += sign * num;
                num = 0;
                sign = 1;
            } else if (c == '-') {
                res += sign * num;
                num = 0;
                sign = -1;
            } else if (c == '(') {
                // Push current result and sign
                stack.push(res);
                stack.push(sign);
                // Reset for new sub-expression
                res = 0;
                sign = 1;
            } else if (c == ')') {
                res += sign * num;
                num = 0;
                res *= stack.pop(); // sign before '('
                res += stack.pop(); // result calculated before '('
            }
            // Spaces are ignored
        }
        // Add the last pending number
        res += sign * num;
        return res;
    }
}
